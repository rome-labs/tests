name: OpenZeppelin
run-name: "OpenZeppelin / proxy / ${{ github.event.inputs.tasks_number || '16' }} tasks"

on:
  workflow_dispatch:
    inputs:
      rome_evm_tag:
        type: string
        description: 'rome_evm tag'
        required: false
        default: 'main'
      rome_apps_tag:
        type: string
        description: 'rome_apps tag to run proxy'
        required: false
        default: 'main'
      tasks_number:
        description: "count of parallel tasks"
        required: true
        default: "16"

env:
  REF_NAME: ${{github.ref_name}}
  ROME_EVM_TAG: ${{ github.event.inputs.rome_evm_tag || 'main' }}
  PROXY_TAG: ${{ github.event.inputs.rome_apps_tag || 'main' }}
  TASKS_NUMBER: ${{ github.event.inputs.tasks_number || '16' }}

permissions:
  contents: read
  pages: write
  id-token: write
jobs:
  build:
    runs-on:
      labels: ubuntu-22.04-8core-32gb-300
    steps:
      - name: "Install Docker-compose"
        uses: ndeloof/install-compose-action@v0.0.1
        with:
          version: v2.29.2 # defaults to 'latest'
          legacy: true    # will also install in PATH as `docker-compose`

      - name: "Check Docker-compose version"
        run: docker-compose --version

      - name: 'Checkout tests repository'
        uses: actions/checkout@main
        with:
          repository: rome-labs/tests
          path: tests
          ref: ${{github.ref_name}}
          token: ${{ secrets.GIT_ROLLUP_TOKEN }}

      - name: 'Checkout report branch to get history'
        uses: actions/checkout@main
        with:
          repository: rome-labs/tests
          path: reports
          ref: reports
          token: ${{ secrets.GIT_ROLLUP_TOKEN }}

      - name: 'Copy history form Reports Branch'
        run: |
          ls -l reports
          mkdir -p reports/${{ github.ref_name }}/history
          ls -l reports/${{ github.ref_name }}/history
          cp -r reports/${{ github.ref_name }}/history ./allure-history || echo "No history found for this branch"

      - name: 'Login to Docker Hub'
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}

      - name: 'Build oz image'
        uses: docker/build-push-action@v4.0.0
        with:
          context: .
          push: false
          file: tests/ci/Dockerfile_oz
          tags: romelabs/oz:${{env.REF_NAME}}
          labels: romelabs/oz:${{env.REF_NAME}}

      - name: 'Airdrop'
        run: docker-compose -f tests/ci/docker-compose.yml up airdrop_oz

      - name: 'reg_rollup'
        run: docker-compose -f tests/ci/docker-compose.yml up reg_rollup

      - name: 'create_balance'
        run: docker-compose -f tests/ci/docker-compose.yml up create_balance

      - name: 'Run oz contaner'
        run: docker-compose -f tests/ci/docker-compose.yml up oz -d

      - name: 'Sleep for 30 seconds'
        run: sleep 30s
        shell: bash

      - name: 'Run oz tests'
        run: docker-compose -f tests/ci/docker-compose.yml exec -i oz /opt/bin/oz

      - name: 'Copy Allure History to Docker Container'
        run: |
          docker cp ./allure-history $(docker-compose -f tests/ci/docker-compose.yml ps -q oz):/opt/allure-results/history

      - name: 'Allure generate'
        run: docker-compose -f tests/ci/docker-compose.yml exec -i oz sh -c "cd /opt && allure generate -o /opt/allure-report"

      - name: 'Copy Allure Report from Docker'
        run: |
          docker cp $(docker-compose -f tests/ci/docker-compose.yml ps -q oz):/opt/allure-report ./allure-report

      - name: 'Upload Allure Report as Artifact'
        uses: actions/upload-artifact@v3
        with:
          name: allure-report
          path: ./allure-report

      - name: 'Publish Allure Report to Run-Specific Folder in Repository'
        uses: peaceiris/actions-gh-pages@v3
        with:
          github_token: ${{secrets.GIT_ROLLUP_TOKEN}}
          publish_dir: ./allure-report
          publish_branch: reports
          destination_dir: ${{ github.ref_name }}

      - name: 'Dump docker logs'
        uses: jwalton/gh-docker-logs@v2
        with:
          dest: './logs'

      - name: 'Tar logs'
        run: tar cvzf ./logs.tgz ./logs
      - name: Upload logs to GitHub
        uses: actions/upload-artifact@main
        with:
          name: logs.tgz
          path: ./logs.tgz

      - name: 'Down docker-compose'
        run: docker-compose -f tests/ci/docker-compose.yml down --rmi all -v

