name: Reusable workflow tests

on:
  workflow_call:
    inputs:
      docker_image_tags:
        type: string
        description: 'JSON object containing Docker image tags (e.g., {"evm": "latest", "apps": "latest", "geth": "latest", "tests": "latest", "uniswap": "latest"})'
        required: true
        default: '{"evm": "latest", "apps": "latest", "geth": "latest", "tests": "latest", "uniswap": "latest"}'
      tests_list:
        type: string
        description: 'Comma-separated list of tests to run (e.g., tests,uniswap_op_geth,uniswap_proxy,load_test_proxy)'
        required: true
        default: 'tests'
      rome_tests_ref_name:
        type: string
        description: 'Test repo branch name to use for running the tests'
        required: false
        default: 'main'
permissions:
  contents: read

concurrency:
  group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.ref }}
  cancel-in-progress: true

jobs:
  prepare:
    name: "Prepare matrix"
    runs-on: ubuntu-latest
    outputs:
      test_matrix: ${{ steps.json.outputs.tests || '"["tests"]"' }}
    steps:
      - name: Build matrix
        uses: actions/github-script@v7
        id: json
        with:
          script: |
            let testsList = '${{ inputs.tests_list }}'.split(',').map(test => test.trim());
            let arguments = ["UniswapV2ERC20", "UniswapV2Factory", "UniswapV2Pair"];
            let matrix = [];

            testsList.forEach(test => {
              if (test === "uniswap_proxy" || test === "uniswap_op_geth") {
                arguments.forEach(arg => {
                  matrix.push({ "test": test, "argument": arg });
                });
              } else {
                matrix.push({ "test": test, "argument": "" });
              }
            });
            let json = JSON.stringify(matrix);
            console.log(json);
            core.setOutput('tests', json); 
      - name: Get output
        run: echo "${{ steps.json.outputs.tests }}"

  run-tests:
    name: "# "
    needs: prepare
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      # max-parallel: 3
      matrix:
        include: ${{ fromJson(needs.prepare.outputs.test_matrix) }}
    steps:
      - name: 'Set Environment Variables'
        id: set_env
        run: |
          # Safely handle docker_image_tags input, fallback to 'latest' if missing
          docker_image_tags='${{ inputs.docker_image_tags }}'

          # Ensure fallback to latest for missing keys using jq's fallback operator (//)
          evm_ver=$(echo "$docker_image_tags" | jq -r '.evm // "latest"')
          apps_ver=$(echo "$docker_image_tags" | jq -r '.apps // "latest"')
          geth_ver=$(echo "$docker_image_tags" | jq -r '.geth // "latest"')
          tests_ver=$(echo "$docker_image_tags" | jq -r '.tests // "latest"')
          uniswap_ver=$(echo "$docker_image_tags" | jq -r '.uniswap // "latest"')
          openzeppelin_ver=$(echo "$docker_image_tags" | jq -r '.openzeppelin // "latest"')

          # Export environment variables to be available to subsequent steps
          echo "ROME_EVM_TAG=$evm_ver" >> $GITHUB_ENV
          echo "GETH_TAG=$geth_ver" >> $GITHUB_ENV
          echo "ROME_APPS_TAG=$apps_ver" >> $GITHUB_ENV
          echo "RHEA_TAG=$apps_ver" >> $GITHUB_ENV
          echo "PROXY_TAG=$apps_ver" >> $GITHUB_ENV
          echo "CLI_TAG=$apps_ver" >> $GITHUB_ENV
          echo "TESTS_TAG=$tests_ver" >> $GITHUB_ENV
          echo "UNISWAP_V2_TAG=$uniswap_ver" >> $GITHUB_ENV
          echo "OPENZEPPELIN_TAG=$openzeppelin_ver" >> $GITHUB_ENV
          echo "GETH_URL=http://geth:8545" >> $GITHUB_ENV
          echo "PROXY_URL=http://proxy:9090" >> $GITHUB_ENV
          echo "EXTENDED_LOGS=--nocapture" >> $GITHUB_ENV

          echo "TESTS_REF_NAME=${{ inputs.rome_tests_ref_name || 'main' }}" >> $GITHUB_ENV

          echo "---------------------------ENVIRONMENT VARIABLES-------------------------------------"
          cat $GITHUB_ENV
          echo "--------------------------------------------------------------------------------------"

      - name: 'Checkout tests repository'
        uses: actions/checkout@v4
        with:
          repository: rome-labs/tests
          path: tests
          ref: ${{env.TESTS_REF_NAME || 'main'}}
          token: ${{ secrets.GIT_ROLLUP_TOKEN }}

      - name: Install Compose
        uses: ndeloof/install-compose-action@v0.0.1
        with:
          version: v2.4.1 # defaults to 'latest'
          legacy: true    # will also install in PATH as `docker-compose`

      - name: 'Login to Docker Hub'
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}

      - name: Run ${{ matrix.test }} ${{ matrix.argument }}
        timeout-minutes: 20
        run: |
          echo "docker ps -a: "
          docker ps -a
          cd tests
          chmod +x ./ci/scripts/${{ matrix.test }}.sh
          if [[ -n "${{ matrix.argument }}" ]]; then
            ./ci/scripts/${{ matrix.test }}.sh ${{ matrix.argument }}
          else
            ./ci/scripts/${{ matrix.test }}.sh
          fi
        
      - name: Upload logs for ${{ matrix.test }}
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: test-logs-${{ matrix.test }}${{ matrix.argument }}
          path: tests/records/${{ matrix.test }}${{ matrix.argument }}.txt

  collect-logs:
    name: "Collect logs"
    needs: run-tests
    if: always()
    runs-on: ubuntu-latest
    steps:
      - name: 'Checkout tests repository'
        if: always()
        uses: actions/checkout@v4
        with:
          repository: rome-labs/tests
          path: tests
          ref: ${{env.TESTS_REF_NAME || 'main'}}
          token: ${{ secrets.GIT_ROLLUP_TOKEN }}

      - name: Download all logs
        if: always()
        uses: actions/download-artifact@v4
        with:
          pattern: test-logs-*
          path: tests/records/
          merge-multiple: true

      - name: List downloaded logs
        if: always()
        run: ls -l tests/records/

      - name: 'Generate test reports'
        if: always()
        run: |
          cd tests
          chmod +x ./ci/scripts/generate_ctrf.sh
          ./ci/scripts/generate_ctrf.sh
          echo "Test resuls file content:"
          ls -l
          ls -l records
        shell: bash

      - name: 'Tar logs from records folder'
        run: tar cvzf ./logs.tgz ./tests/records
        if: always()

      - name: Upload logs to GitHub
        uses: actions/upload-artifact@master
        with:
          name: logs.tgz
          path: ./logs.tgz
        if: always()

      - name: 'Parse tests results'
        if: always()
        run: |
          sudo apt-get install jq
          FAILED_TESTS=$(jq '.results.summary.failed' ./tests/records/test_results.json)
          if [ "$FAILED_TESTS" -gt 0 ]; then
            echo "Tests finished with errors: $FAILED_TESTS tests failed."
            exit 1;
          else
           echo "All tests passed successfully."
          fi
