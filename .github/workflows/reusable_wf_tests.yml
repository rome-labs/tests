name: Reusable workflow tests

on:
  workflow_call:
    inputs:
      docker_image_tags:
        type: string
        description: 'JSON object containing Docker image tags (e.g., {"evm": "latest", "apps": "latest", "geth": "latest", "tests": "latest", "uniswap": "latest"})'
        required: true
        default: '{"evm": "latest", "apps": "latest", "relayer": "latest", "geth": "latest", "tests": "latest", "uniswap": "latest"}'
      tests_list:
        type: string
        description: 'Comma-separated list of tests to run (e.g., tests,uniswap_op_geth,uniswap_proxy,load_test_proxy)'
        required: true
        default: 'tests'
      rome_tests_ref_name:
        type: string
        description: 'Test repo branch name to use for running the tests'
        required: false
        default: 'main'
  workflow_dispatch:
    inputs:
      docker_image_tags:
        type: string
        required: true
      tests_list:
        type: string
        required: false
        default: 'evm,spl,state_comparison,state_comparison_2,uniswap_proxy,uniswap_op_geth'
      rome_tests_ref_name:
        type: string
        required: false
        default: 'main'
permissions:
  contents: read

# concurrency:
#   group: ${{ github.workflow }}-${{ github.ref }}-${{ github.job }}
#   cancel-in-progress: true

jobs:
  prepare:
    name: "Prepare matrix"
    runs-on: ubuntu-latest
    outputs:
      test_matrix: ${{ steps.json.outputs.tests || '"["evm"]"' }}
    steps:
      - name: Build matrix
        uses: actions/github-script@v7
        id: json
        with:
          # remove _bkp from testsList to unlock parallelism for uniswap: uniswap_proxy_bkp
          # excluded uniswap set of tests (from arguments):  
          script: |
            let testsList = '${{ inputs.tests_list }}'.split(',').map(test => test.trim());
            let arguments = ["UniswapV2Pair_1", "UniswapV2Pair_2", "UniswapV2Pair_3", "UniswapV2ERC20", "UniswapV2Factory"];
            let matrix = [];

            testsList.forEach(test => {
              if (test === "uniswap_proxy" || test === "uniswap_op_geth") {
                arguments.forEach(arg => {
                  matrix.push({ "test": test, "argument": arg });
                });
              } else {
                matrix.push({ "test": test, "argument": "" });
              }
            });
            let json = JSON.stringify(matrix);
            console.log(json);
            core.setOutput('tests', json); 
      - name: Get output
        run: echo "${{ steps.json.outputs.tests }}"

  run-tests:
    name: "# "
    needs: prepare
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        include: ${{ fromJson(needs.prepare.outputs.test_matrix) }}
    steps:
      - name: 'Set Environment Variables'
        id: set_env
        run: |
          # Safely handle docker_image_tags input, fallback to 'latest' if missing
          docker_image_tags='${{ inputs.docker_image_tags }}'

          # Ensure fallback to latest for missing keys using jq's fallback operator (//)
          evm_ver=$(echo "$docker_image_tags" | jq -r '.evm // "latest"')
          apps_ver=$(echo "$docker_image_tags" | jq -r '.apps // "latest"')
          relayer_ver=$(echo "$docker_image_tags" | jq -r '.relayer // "latest"')
          geth_ver=$(echo "$docker_image_tags" | jq -r '.geth // "latest"')
          tests_ver=$(echo "$docker_image_tags" | jq -r '.tests // "latest"')
          uniswap_ver=$(echo "$docker_image_tags" | jq -r '.uniswap // "latest"')
          openzeppelin_ver=$(echo "$docker_image_tags" | jq -r '.openzeppelin // "latest"')

          # Export environment variables to be available to subsequent steps
          echo "ROME_EVM_TAG=$evm_ver" >> $GITHUB_ENV
          echo "GETH_TAG=$geth_ver" >> $GITHUB_ENV
          echo "ROME_APPS_TAG=$apps_ver" >> $GITHUB_ENV
          echo "ROME_RELAYER_TAG=$relayer_ver" >> $GITHUB_ENV
          echo "RHEA_TAG=$apps_ver" >> $GITHUB_ENV
          echo "PROXY_TAG=$apps_ver" >> $GITHUB_ENV
          echo "CLI_TAG=$apps_ver" >> $GITHUB_ENV
          echo "TESTS_TAG=$tests_ver" >> $GITHUB_ENV
          echo "UNISWAP_V2_TAG=$uniswap_ver" >> $GITHUB_ENV
          echo "OPENZEPPELIN_TAG=$openzeppelin_ver" >> $GITHUB_ENV
          echo "GETH_URL=http://geth:8545" >> $GITHUB_ENV
          echo "PROXY_URL=http://proxy:9090" >> $GITHUB_ENV
          echo "EXTENDED_LOGS=--nocapture" >> $GITHUB_ENV

          echo "TESTS_REF_NAME=${{ inputs.rome_tests_ref_name || 'main' }}" >> $GITHUB_ENV

          echo "---------------------------ENVIRONMENT VARIABLES-------------------------------------"
          cat $GITHUB_ENV
          echo "--------------------------------------------------------------------------------------"

      - name: 'Checkout tests repository'
        uses: actions/checkout@v4
        with:
          repository: rome-labs/tests
          path: tests
          ref: ${{env.TESTS_REF_NAME || 'main'}}
          token: ${{ secrets.GIT_ROLLUP_TOKEN }}

      - name: Install Compose
        uses: ndeloof/install-compose-action@v0.0.1
        with:
          version: v2.4.1 # defaults to 'latest'
          legacy: true    # will also install in PATH as `docker-compose`

      - name: 'Login to Docker Hub'
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}

      - name: Run ${{ matrix.test }} ${{ matrix.argument }}
        timeout-minutes: 20
        run: |
          echo "docker ps -a: "
          docker ps -a
          cd tests
          chmod +x ./ci/scripts/${{ matrix.test }}.sh
          if [[ -n "${{ matrix.argument }}" ]]; then
            ./ci/scripts/${{ matrix.test }}.sh ${{ matrix.argument }}
          else
            ./ci/scripts/${{ matrix.test }}.sh
          fi

      - name: Copy Logs for ${{ matrix.test }}
        run: |
          cd tests/ci/ 
          LOGS_DIR="../records/docker-logs"
          mkdir -p $LOGS_DIR
          docker-compose ps -aq | xargs -I {} sh -c 'docker logs {} > ../records/docker-logs/$(docker inspect --format="{{.Name}}" {}).log 2>&1'
          ls
          ls -l ../records/docker-logs
        if: always()

      - name: Rename docker log folder
        run: |
            echo ">>> records folder content:"
            ls -l tests/records/
            echo ">>> docker-logs folder content:"
            ls -l tests/records/docker-logs
            mv tests/records/docker-logs tests/records/docker-logs-${{ matrix.test }}${{ matrix.argument }}
            echo ">>> records folder content:"
            ls -l tests/records/
        if: always()

      - name: Clear environment
        if: always()
        run: |
          cd tests/ci/
          docker-compose down > /dev/null
          docker container prune -f

      - name: Upload logs for ${{ matrix.test }}
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: logs-for-${{ matrix.test }}${{ matrix.argument }}
          path: |
            tests/records/${{ matrix.test }}${{ matrix.argument }}.txt
            tests/records/docker-logs-${{ matrix.test }}${{ matrix.argument }}
